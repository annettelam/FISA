<!-- Admin View Container -->
<div id="alertContainer"></div>
<div id="updatesContainer" class="space-y-4"></div>

<!-- Include this script at the end of your body -->
<script>
  async function fetchProposedUpdates() {
    try {
      const response = await fetch('/api/proposed-updates');
      const updates = await response.json();
      displayUpdates(updates);
    } catch (error) {
      console.error('Error fetching proposed updates:', error);
      showAlert('An error occurred while fetching proposed updates.', 'error');
    }
  }

  function displayUpdates(updates) {
    const container = document.getElementById('updatesContainer');
    container.innerHTML = ''; // Clear existing content

    if (updates.length === 0) {
      // No updates to display
      const noUpdatesDiv = document.createElement('div');
      noUpdatesDiv.classList.add('p-6', 'bg-white', 'rounded-lg', 'border', 'shadow-md', 'text-center');
      noUpdatesDiv.innerHTML = `
        <p class="text-gray-700 text-lg">There are no proposed updates at this time.</p>
      `;
      container.appendChild(noUpdatesDiv);
      return;
    }

    updates.forEach((update) => {
      const { id, school_number, submitted_at, diffs } = update;

      const updateDiv = document.createElement('div');
      updateDiv.id = `update-${id}`;
      updateDiv.classList.add('p-6', 'bg-white', 'rounded-lg', 'border', 'shadow-md');

      // Build the inner HTML using template literals
      let updateHTML = `
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-xl font-semibold text-gray-800">School Number: ${school_number}</h3>
          <p class="text-sm text-gray-500">Submitted At: ${new Date(submitted_at).toLocaleString()}</p>
        </div>
      `;

      if (update.error) {
        updateHTML += `
          <div class="p-4 mb-4 text-sm text-red-700 bg-red-100 rounded-lg" role="alert">
            Error: ${update.error}
          </div>
        `;
      } else if (Object.keys(diffs).length > 0) {
        updateHTML += `
          <div class="overflow-x-auto">
            <table class="w-full text-sm text-left text-gray-500 mb-4">
              <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                <tr>
                  <th scope="col" class="px-4 py-2">Field</th>
                  <th scope="col" class="px-4 py-2">Current Value</th>
                  <th scope="col" class="px-4 py-2">Proposed Value</th>
                </tr>
              </thead>
              <tbody>
        `;

        Object.entries(diffs).forEach(([field, values]) => {
          updateHTML += `
            <tr class="bg-white border-b">
              <td class="px-4 py-2 font-medium text-gray-900">${field}</td>
              <td class="px-4 py-2">${values.current}</td>
              <td class="px-4 py-2">${values.proposed}</td>
            </tr>
          `;
        });

        updateHTML += `
              </tbody>
            </table>
          </div>
        `;
      } else {
        updateHTML += `
          <p>No differences found.</p>
        `;
      }

      updateHTML += `
        <div class="flex space-x-2">
          <button class="accept-btn bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded">
            Accept
          </button>
          <button class="reject-btn bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded">
            Reject
          </button>
        </div>
      `;

      updateDiv.innerHTML = updateHTML;
      container.appendChild(updateDiv);

      // Attach event listeners to the buttons
      const acceptButton = updateDiv.querySelector('.accept-btn');
      const rejectButton = updateDiv.querySelector('.reject-btn');

      acceptButton.addEventListener('click', () => acceptUpdate(id));
      rejectButton.addEventListener('click', () => rejectUpdate(id));
    });
  }

  function acceptUpdate(id) {
    fetch('/api/accept', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ id })
    })
      .then(response => response.json())
      .then(data => {
        if (data.error) {
          showAlert(data.error, 'error');
        } else {
          document.getElementById(`update-${id}`).remove();
          showAlert(data.message, 'success');

          // Check if there are any remaining updates
          if (document.getElementById('updatesContainer').children.length === 0) {
            displayNoUpdatesMessage();
          }
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showAlert('An error occurred while accepting the update.', 'error');
      });
  }

  function rejectUpdate(id) {
    fetch('/api/reject', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ id })
    })
      .then(response => response.json())
      .then(data => {
        if (data.error) {
          showAlert(data.error, 'error');
        } else {
          document.getElementById(`update-${id}`).remove();
          showAlert(data.message, 'success');

          // Check if there are any remaining updates
          if (document.getElementById('updatesContainer').children.length === 0) {
            displayNoUpdatesMessage();
          }
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showAlert('An error occurred while rejecting the update.', 'error');
      });
  }

  function showAlert(message, type) {
    // Remove existing alert if any
    const existingAlert = document.getElementById('alertMessage');
    if (existingAlert) {
      existingAlert.remove();
    }

    const alertDiv = document.createElement('div');
    alertDiv.id = 'alertMessage';
    alertDiv.classList.add('p-4', 'mb-4', 'text-sm', 'rounded-lg');

    if (type === 'success') {
      alertDiv.classList.add('text-green-700', 'bg-green-100');
    } else {
      alertDiv.classList.add('text-red-700', 'bg-red-100');
    }

    alertDiv.textContent = message;

    const alertContainer = document.getElementById('alertContainer');
    alertContainer.appendChild(alertDiv);

    // Optionally, remove the alert after some time
    setTimeout(() => {
      alertDiv.remove();
    }, 5000);
  }

  function displayNoUpdatesMessage() {
    const container = document.getElementById('updatesContainer');
    const noUpdatesDiv = document.createElement('div');
    noUpdatesDiv.classList.add('p-6', 'bg-white', 'rounded-lg', 'border', 'shadow-md', 'text-center');
    noUpdatesDiv.innerHTML = `
      <p class="text-gray-700 text-lg">There are no proposed updates at this time.</p>
    `;
    container.appendChild(noUpdatesDiv);
  }

  // Fetch updates on page load
  window.onload = fetchProposedUpdates;
</script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.3/flowbite.min.css" rel="stylesheet" />