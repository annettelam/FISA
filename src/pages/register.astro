---
import Layout from '../layouts/Layout.astro';
import { createCsrfToken } from '../lib/csrf';

// Generate CSRF token and secret
const { csrfToken, secret } = createCsrfToken();

// Set the CSRF secret as a cookie
Astro.cookies.set('csrf-secret', secret, {
  httpOnly: true,
  secure: import.meta.env.PROD, // `true` in production, `false` in development
  sameSite: 'lax',
  path: '/',
});
---
<Layout title="Register">
  <!-- Registration Form -->
  <form id="registrationForm" class="max-w-sm mx-auto">
    <!-- CSRF Token Hidden Input -->
    <input type="hidden" name="csrfToken" value={csrfToken} />

    <div class="mb-5">
      <label for="email" class="block mb-2 text-sm font-medium text-gray-900">Your email</label>
      <input
        type="email"
        id="email"
        name="email"
        class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5"
        placeholder="name@example.com"
        required
      />
    </div>
    <div class="mb-5">
      <label for="password" class="block mb-2 text-sm font-medium text-gray-900">Your password</label>
      <input
        type="password"
        id="password"
        name="password"
        class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5"
        required
      />
    </div>
    <div class="mb-5">
      <label for="repeat-password" class="block mb-2 text-sm font-medium text-gray-900">Repeat password</label>
      <input
        type="password"
        id="repeat-password"
        name="repeatPassword"
        class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5"
        required
      />
    </div>
    <!-- Admin Account Checkbox -->
    <div class="mb-5">
      <label class="inline-flex items-center">
        <input
          type="checkbox"
          id="isAdmin"
          name="isAdmin"
          class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
        />
        <span class="ml-2 text-sm font-medium text-gray-900">Register as Admin</span>
      </label>
    </div>
    <div class="flex items-start mb-5">
      <div class="flex items-center h-5">
        <input
          id="terms"
          type="checkbox"
          name="terms"
          class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300"
          required
        />
      </div>
      <label for="terms" class="ml-2 text-sm font-medium text-gray-900">
        I agree with the
        <a href="#" class="text-blue-600 hover:underline">terms and conditions</a>
      </label>
    </div>
    <button
      type="submit"
      class="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5"
    >
      Register new account
    </button>
  </form>

  <script>
    document.getElementById('registrationForm').addEventListener('submit', async (event) => {
      event.preventDefault(); // Prevent the default form submission

      const formData = new FormData(event.target);
      const data = Object.fromEntries(formData.entries());

      // Convert 'isAdmin' checkbox value to boolean
      data.isAdmin = data.isAdmin === 'on';

      if (data.password !== data.repeatPassword) {
        alert("Passwords do not match.");
        return;
      }

      // Remove 'repeatPassword' from data
      delete data.repeatPassword;

      try {
        const response = await fetch('/api/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        if (response.status === 201) {
          alert('Registration successful! Redirecting to login...');
          window.location.href = '/login';
        } else {
          const errorText = await response.text();
          throw new Error(errorText || 'Registration failed');
        }
      } catch (error) {
        console.error('Error:', error);
        alert(`Error: ${error.message}`);
      }
    });
  </script>
</Layout>
