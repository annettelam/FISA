---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Database Visualization">
  <!-- Main Content -->
  <div class="max-w-7xl mx-auto mt-10 p-8 bg-white dark:bg-gray-800 shadow-md rounded-lg transition-colors duration-300">
    <div class="text-center mb-10">
      <h1 class="text-3xl font-bold text-gray-800 dark:text-gray-100">Database Visualization</h1>
      <p class="text-gray-600 dark:text-gray-300">
        Explore detailed data of all schools in the system, with filtering and sorting options.
      </p>
    </div>

    <!-- Filters Section -->
    <div class="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
      <!-- Schools by Association -->
      <div>
        <label for="association" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Schools by Association</label>
        <select id="association" name="association" class="block w-full pl-3 pr-10 py-2 text-base bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-300 border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md transition-colors duration-300">
          <option value="">All Associations</option>
        </select>
      </div>

      <!-- Schools by Name -->
      <div>
        <label for="schoolName" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Schools by Name</label>
        <input type="text" id="schoolName" name="schoolName" placeholder="Search by school name" class="block w-full pl-3 pr-3 py-2 text-base bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-300 border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md transition-colors duration-300">
      </div>

      <!-- Sort by Column -->
      <div>
        <label for="sortColumn" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Sort by Column</label>
        <select id="sortColumn" name="sortColumn" class="block w-full pl-3 pr-10 py-2 text-base bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-300 border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md transition-colors duration-300">
          <option value="">Select Column</option>
        </select>
      </div>
    </div>

    <!-- Clear All Filters Button -->
    <div class="flex justify-end mb-4">
      <button id="clear-filters" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors duration-300">
        Clear All Filters
      </button>
    </div>

    <!-- Total Number of Schools -->
    <div class="mb-2 text-sm text-gray-700 dark:text-gray-300">
      Total Schools Displayed: <span id="totalSchools">0</span>
    </div>

    <!-- Table with sticky headers and accessible scrollbar -->
    <div class="table-container border border-gray-300 dark:border-gray-700 rounded-lg shadow">
      <table class="min-w-full text-sm text-left text-gray-700 dark:text-gray-300">
        <!-- Table Header -->
        <thead class="bg-gray-200 dark:bg-gray-700">
          <tr id="table-header">
            <!-- Headers will be populated dynamically -->
          </tr>
        </thead>
        <!-- Table Body -->
        <tbody id="table-body" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
          <!-- Rows will be populated dynamically -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Custom Script for dynamic table population and Clear All Filters -->
  <script>
    let originalData; // To store the unfiltered original data
    let currentPage = 1;

    // Fetch data and initialize the table
    (async function() {
      try {
        const response = await fetch('http://localhost:4321/api/data');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        let data = await response.json();
        originalData = data; // Store original data

        if (data.length === 0) {
          console.warn("No data received from the API.");
          return;
        }

        const headers = Object.keys(data[0]);

        // Populate table headers
        const headerRow = document.getElementById('table-header');
        headers.forEach(key => {
          const th = document.createElement('th');
          th.className = 'px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider';
          th.textContent = key;
          headerRow.appendChild(th);
        });

        // Populate filter options
        const associations = [...new Set(data.map(item => item.ASSOC))].filter(Boolean).sort();
        const associationSelect = document.getElementById('association');
        associations.forEach(assoc => {
          const option = document.createElement('option');
          option.value = assoc;
          option.textContent = assoc;
          associationSelect.appendChild(option);
        });

        const sortColumnSelect = document.getElementById('sortColumn');
        headers.forEach(header => {
          const option = document.createElement('option');
          option.value = header;
          option.textContent = header;
          sortColumnSelect.appendChild(option);
        });

        // Event listeners for filters
        associationSelect.addEventListener('change', applyFilters);
        document.getElementById('schoolName').addEventListener('input', applyFilters);
        sortColumnSelect.addEventListener('change', applyFilters);

        // Event listener for clear filters
        document.getElementById('clear-filters').addEventListener('click', clearFilters);

        // Initial render
        renderTableBody(data);

        // Set initial total schools displayed
        document.getElementById('totalSchools').textContent = data.length;
      } catch (error) {
        console.error("Error fetching or rendering data:", error);
        alert("An error occurred while loading the data. Please try again later.");
      }
    })();

    function applyFilters() {
      let filteredData = [...originalData];

      const associationValue = document.getElementById('association').value;
      const schoolNameValue = document.getElementById('schoolName').value.toLowerCase();
      const sortColumnValue = document.getElementById('sortColumn').value;

      // Filter by Association
      if (associationValue) {
        filteredData = filteredData.filter(item => item.ASSOC === associationValue);
      }

      // Filter by School Name
      if (schoolNameValue) {
        filteredData = filteredData.filter(item => item.SCHOOL.toLowerCase().includes(schoolNameValue));
      }

      // Sort by Column
      if (sortColumnValue) {
        filteredData.sort((a, b) => {
          if (a[sortColumnValue] < b[sortColumnValue]) return -1;
          if (a[sortColumnValue] > b[sortColumnValue]) return 1;
          return 0;
        });
      }

      // Update total schools displayed
      document.getElementById('totalSchools').textContent = filteredData.length;

      // Re-render table body
      renderTableBody(filteredData);
    }

    function clearFilters() {
      // Clear filter input fields
      document.getElementById('association').value = "";
      document.getElementById('schoolName').value = "";
      document.getElementById('sortColumn').value = "";

      // Reset table to original data
      renderTableBody(originalData);

      // Update total schools displayed
      document.getElementById('totalSchools').textContent = originalData.length;
    }

    function renderTableBody(dataToRender) {
      const tbody = document.getElementById('table-body');
      tbody.innerHTML = ''; // Clear existing rows

      dataToRender.forEach((row, index) => {
        const tr = document.createElement('tr');
        tr.className = index % 2 === 0 ? '' : 'bg-gray-50 dark:bg-gray-700';
        Object.keys(row).forEach(key => {
          const td = document.createElement('td');
          td.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300';

          // Check if the current column should be a clickable link
          if (key === 'SCHOOL') {
            const schoolNum = row['SCHOOL_NUM']; // Use the SCHOOL_NUM for the link
            const link = document.createElement('a');
            link.href = `/fact-sheet?schoolNum=${encodeURIComponent(schoolNum)}`;
            link.textContent = row[key];
            link.className = 'text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-500';
            td.appendChild(link);
          } else {
            td.textContent = row[key];
          }
          tr.appendChild(td);
        });
        tbody.appendChild(tr);
      });
    }
  </script>
</Layout>

<style>
  .table-container {
    position: relative;
    width: 100%;
    height: 70vh;
    overflow: auto;
  }

  thead {
    position: sticky;
    top: 0;
    z-index: 1;
  }

  tbody tr:hover {
    background-color: #f1f5f9;
  }

  .table-container::-webkit-scrollbar {
    height: 12px;
  }

  .table-container::-webkit-scrollbar-thumb {
    background-color: #a0aec0;
    border-radius: 6px;
  }
</style>
