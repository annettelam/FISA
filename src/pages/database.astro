---
import Layout from "../layouts/Layout.astro";

const user = Astro.locals.user;
---

<Layout title="Database Visualization">
  <!-- Main Content -->
  <div class="max-w-7xl mx-auto mt-10 p-8 bg-white dark:bg-gray-800 shadow-md rounded-lg transition-colors duration-300">
    <div class="text-center mb-10">
      <h1 class="text-3xl font-bold text-gray-800 dark:text-gray-100">Database Visualization</h1>
      <p class="text-gray-600 dark:text-gray-300">
        Explore detailed data of all schools in the system, with filtering and sorting options.
      </p>
    </div>

    <!-- Table Selection -->
    <div class="mb-4">
      <label for="tableSelect" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Select Table</label>
      <select id="tableSelect" name="tableSelect" class="block w-full p-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-300 border border-gray-300 dark:border-gray-700 rounded-md" required>
        <option value="" disabled selected>Select a table</option>
        <!-- Options will be populated dynamically -->
      </select>
    </div>

    <!-- Filters Section -->
    <div class="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
      <!-- Schools by Association -->
      <div>
        <label for="association" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Schools by Association</label>
        <select id="association" name="association" class="block w-full pl-3 pr-10 py-2 text-base bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-300 border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md transition-colors duration-300">
          <option value="">All Associations</option>
        </select>
      </div>

      <!-- Schools by Name -->
      <div>
        <label for="schoolName" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Schools by Name</label>
        <input type="text" id="schoolName" name="schoolName" placeholder="Search by school name" class="block w-full pl-3 pr-3 py-2 text-base bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-300 border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md transition-colors duration-300">
      </div>

      <!-- Sort by Column -->
      <div>
        <label for="sortColumn" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Sort by Column</label>
        <select id="sortColumn" name="sortColumn" class="block w-full pl-3 pr-10 py-2 text-base bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-300 border border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md transition-colors duration-300">
          <option value="">Select Column</option>
        </select>
      </div>
    </div>

    <!-- Clear All Filters Button -->
    <div class="flex justify-end mb-4">
      <button id="clear-filters" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors duration-300">
        Clear All Filters
      </button>
    </div>

    <!-- Total Number of Schools -->
    <div class="mb-2 text-sm text-gray-700 dark:text-gray-300">
      Total Schools Displayed: <span id="totalSchools">0</span>
    </div>

    <!-- Table with sticky headers and accessible scrollbar -->
    <div class="table-container border border-gray-300 dark:border-gray-700 rounded-lg shadow">
      <table class="min-w-full text-sm text-left text-gray-700 dark:text-gray-300">
        <!-- Table Header -->
        <thead class="bg-gray-200 dark:bg-gray-700">
          <tr id="table-header">
            <!-- Headers will be populated dynamically -->
          </tr>
        </thead>
        <!-- Table Body -->
        <tbody id="table-body" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
          <!-- Rows will be populated dynamically -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Custom Script for dynamic table selection and filtering -->
  <script>
    let originalData; // To store the unfiltered original data
    let filteredData; // To store the filtered data
    let currentTable = ""; // Track the selected table name

    // Function to fetch tables for the dropdown
    async function fetchTables() {
      try {
        const response = await fetch('/api/list-tables');
        if (response.ok) {
          const data = await response.json();
          populateTableSelect(data.tables);
        } else {
          throw new Error('Failed to fetch tables.');
        }
      } catch (error) {
        console.error('Error fetching tables:', error);
      }
    }

    // Populate the tables dropdown
    function populateTableSelect(tables) {
      const tableSelect = document.getElementById('tableSelect');
      tableSelect.innerHTML = '<option value="" disabled selected>Select a table</option>';

      if (tables.length === 0) {
        const option = document.createElement('option');
        option.value = "";
        option.textContent = "No tables available";
        option.disabled = true;
        tableSelect.appendChild(option);
        tableSelect.disabled = true;
        return;
      }

      tableSelect.disabled = false;
      tables.forEach(table => {
        const option = document.createElement('option');
        option.value = table;
        option.textContent = table;
        tableSelect.appendChild(option);
      });

      // Fetch data for the selected table when user changes table selection
      tableSelect.addEventListener('change', fetchDataForTable);
    }

    // Fetch data for the selected table
    async function fetchDataForTable() {
      const selectedTable = document.getElementById('tableSelect').value;
      if (!selectedTable || currentTable === selectedTable) return; // No change, don't re-fetch

      currentTable = selectedTable; // Update current table

      try {
        const response = await fetch(`/api/data?table=${encodeURIComponent(selectedTable)}`);
        if (!response.ok) {
          throw new Error(`Failed to fetch data for table: ${selectedTable}`);
        }
        const data = await response.json();
        originalData = data; // Store the data
        filteredData = [...originalData]; // Initialize filteredData

        // Populate table headers
        populateTableHeaders(data);
        // Populate filter options
        populateFilters(data);
        // Attach event listeners for filters
        attachFilterEventListeners();
        // Initial render
        renderTableBody(filteredData);
        document.getElementById('totalSchools').textContent = filteredData.length;
      } catch (error) {
        console.error(`Error fetching data for table ${selectedTable}:`, error);
      }
    }

    function populateTableHeaders(data) {
      const headers = Object.keys(data[0] || {});
      const headerRow = document.getElementById('table-header');
      headerRow.innerHTML = ''; // Clear existing headers
      headers.forEach(key => {
        const th = document.createElement('th');
        th.className = 'px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider';
        th.textContent = key;
        headerRow.appendChild(th);
      });
    }

    function populateFilters(data) {
      // Populate filter options
      const associations = [...new Set(data.map(item => item.ASSOC))].filter(Boolean).sort();
      const associationSelect = document.getElementById('association');
      associationSelect.innerHTML = '<option value="">All Associations</option>'; // Reset filter
      associations.forEach(assoc => {
        const option = document.createElement('option');
        option.value = assoc;
        option.textContent = assoc;
        associationSelect.appendChild(option);
      });

      const sortColumnSelect = document.getElementById('sortColumn');
      sortColumnSelect.innerHTML = '<option value="">Select Column</option>'; // Reset sorting
      const headers = Object.keys(data[0] || {});
      headers.forEach(header => {
        const option = document.createElement('option');
        option.value = header;
        option.textContent = header;
        sortColumnSelect.appendChild(option);
      });
    }

    function attachFilterEventListeners() {
      const associationSelect = document.getElementById('association');
      const schoolNameInput = document.getElementById('schoolName');
      const sortColumnSelect = document.getElementById('sortColumn');

      // Remove previous event listeners to avoid duplicates
      associationSelect.removeEventListener('change', applyFilters);
      schoolNameInput.removeEventListener('input', applyFilters);
      sortColumnSelect.removeEventListener('change', applyFilters);

      // Add event listeners
      associationSelect.addEventListener('change', applyFilters);
      schoolNameInput.addEventListener('input', applyFilters);
      sortColumnSelect.addEventListener('change', applyFilters);

      // Event listener for clear filters
      const clearFiltersButton = document.getElementById('clear-filters');
      clearFiltersButton.removeEventListener('click', clearFilters);
      clearFiltersButton.addEventListener('click', clearFilters);
    }

    function applyFilters() {
      filteredData = [...originalData];

      const associationValue = document.getElementById('association').value;
      const schoolNameValue = document.getElementById('schoolName').value.toLowerCase();
      const sortColumnValue = document.getElementById('sortColumn').value;

      // Filter by Association
      if (associationValue) {
        filteredData = filteredData.filter(item => item.ASSOC === associationValue);
      }

      // Filter by School Name
      if (schoolNameValue) {
        filteredData = filteredData.filter(item => item.SCHOOL && item.SCHOOL.toLowerCase().includes(schoolNameValue));
      }

      // Sort by Column
      if (sortColumnValue) {
        filteredData.sort((a, b) => {
          if (a[sortColumnValue] < b[sortColumnValue]) return -1;
          if (a[sortColumnValue] > b[sortColumnValue]) return 1;
          return 0;
        });
      }

      // Update total schools displayed
      document.getElementById('totalSchools').textContent = filteredData.length;

      // Re-render table body
      renderTableBody(filteredData);
    }

    function clearFilters() {
      // Clear filter input fields
      document.getElementById('association').value = "";
      document.getElementById('schoolName').value = "";
      document.getElementById('sortColumn').value = "";

      // Reset filtered data
      filteredData = [...originalData];

      // Update total schools displayed
      document.getElementById('totalSchools').textContent = filteredData.length;

      // Re-render table body
      renderTableBody(filteredData);
    }

    // Function to render the table body
    function renderTableBody(data) {
      const tbody = document.getElementById('table-body');
      tbody.innerHTML = ''; // Clear existing rows

      data.forEach((row, index) => {
        const tr = document.createElement('tr');
        tr.className = index % 2 === 0 ? '' : 'bg-gray-50 dark:bg-gray-700';

        Object.keys(row).forEach(key => {
          const td = document.createElement('td');
          td.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300';

          if (key === 'SCHOOL') {
            const schoolNum = row['SCHOOL_NUM'];
            const link = document.createElement('a');
            link.href = `/fact-sheet?schoolNum=${encodeURIComponent(schoolNum)}`;
            link.textContent = row[key];
            link.className = 'text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-500';
            td.appendChild(link);
          } else {
            td.textContent = row[key];
          }
          tr.appendChild(td);
        });

        tbody.appendChild(tr);
      });
    }

    // Initialize table selection and fetch data
    document.addEventListener('DOMContentLoaded', fetchTables);
  </script>
</Layout>

<style>
  .table-container {
    position: relative;
    width: 100%;
    height: 70vh;
    overflow: auto;
  }

  thead {
    position: sticky;
    top: 0;
    z-index: 1;
  }

  tbody tr:hover {
    background-color: #f1f5f9;
  }

  .table-container::-webkit-scrollbar {
    height: 12px;
  }

  .table-container::-webkit-scrollbar-thumb {
    background-color: #a0aec0;
    border-radius: 6px;
  }
</style>
