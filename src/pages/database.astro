<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Database Visualization</title>
  <!-- Include Tailwind CSS -->
  <link href="https://cdn.jsdelivr.net/npm/flowbite@1.5.1/dist/flowbite.min.css" rel="stylesheet">
  <style>
    .table-container {
      position: relative;
      width: 100%;
      height: 70vh; /* Adjust as needed */
      overflow: auto; /* Enable both horizontal and vertical scrolling */
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    thead {
      position: sticky;
      top: 0;
      z-index: 1;
    }
    thead th {
      background-color: #f9fafb; /* Match header background */
    }
    th,
    td {
      text-align: left;
      white-space: nowrap;
      padding: 8px 12px;
    }
    /* Hover effect on rows */
    tbody tr:hover {
      background-color: #f1f5f9;
    }
    /* Custom scrollbar styling (optional) */
    .table-container::-webkit-scrollbar {
      height: 12px;
    }
    .table-container::-webkit-scrollbar-thumb {
      background-color: #a0aec0;
      border-radius: 6px;
    }
  </style>
</head>
<body class="bg-gray-100">
  <div class="container mx-auto p-4">
    <h1 class="text-3xl font-bold mb-6">Database Visualization</h1>

    <!-- Filters -->
    <div class="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
      <!-- Schools by Association -->
      <div>
        <label for="association" class="block text-sm font-medium text-gray-700 mb-1">Schools by Association</label>
        <select id="association" name="association" class="block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
          <option value="">All Associations</option>
          <!-- Options will be populated dynamically -->
        </select>
      </div>

      <!-- Schools by Name -->
      <div>
        <label for="schoolName" class="block text-sm font-medium text-gray-700 mb-1">Schools by Name</label>
        <input type="text" id="schoolName" name="schoolName" placeholder="Search by school name" class="block w-full pl-3 pr-3 py-2 text-base border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
      </div>

      <!-- Sort by Column -->
      <div>
        <label for="sortColumn" class="block text-sm font-medium text-gray-700 mb-1">Sort by Column</label>
        <select id="sortColumn" name="sortColumn" class="block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
          <option value="">Select Column</option>
          <!-- Options will be populated dynamically -->
        </select>
      </div>
    </div>

    <!-- Total Number of Schools -->
    <div class="mb-2 text-sm text-gray-700">
      Total Schools Displayed: <span id="totalSchools">0</span>
    </div>

    <!-- Table with sticky headers and accessible scrollbar -->
    <div class="table-container border border-gray-300 rounded-lg shadow">
      <table class="min-w-full text-sm text-left text-gray-700">
        <!-- Table Header -->
        <thead class="bg-gray-200">
          <tr id="table-header">
            <!-- Headers will be populated dynamically -->
          </tr>
        </thead>
        <!-- Table Body -->
        <tbody id="table-body" class="bg-white divide-y divide-gray-200">
          <!-- Rows will be populated dynamically -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Flowbite JavaScript -->
  <script src="https://unpkg.com/flowbite@1.5.1/dist/flowbite.js"></script>
  <!-- Custom Script -->
  <script>
    // Fetch data and initialize the table
    (async function() {
      try {
        const response = await fetch('http://localhost:4321/api/data');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        let data = await response.json();

        if (data.length === 0) {
          console.warn("No data received from the API.");
          return;
        }

        const headers = Object.keys(data[0]);

        // Populate table headers
        const headerRow = document.getElementById('table-header');
        headers.forEach(key => {
          const th = document.createElement('th');
          th.className = 'px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider';
          th.textContent = key;
          headerRow.appendChild(th);
        });

        // Populate filter options
        const associations = [...new Set(data.map(item => item.ASSOC))].filter(Boolean).sort();
        const associationSelect = document.getElementById('association');
        associations.forEach(assoc => {
          const option = document.createElement('option');
          option.value = assoc;
          option.textContent = assoc;
          associationSelect.appendChild(option);
        });

        const sortColumnSelect = document.getElementById('sortColumn');
        headers.forEach(header => {
          const option = document.createElement('option');
          option.value = header;
          option.textContent = header;
          sortColumnSelect.appendChild(option);
        });

        // Event listeners for filters
        associationSelect.addEventListener('change', applyFilters);
        document.getElementById('schoolName').addEventListener('input', applyFilters);
        sortColumnSelect.addEventListener('change', applyFilters);

        function applyFilters() {
          let filteredData = data;

          // Filter by Association
          const assocValue = associationSelect.value;
          if (assocValue) {
            filteredData = filteredData.filter(item => item.ASSOC === assocValue);
          }

          // Filter by School Name
          const schoolNameValue = document.getElementById('schoolName').value.toLowerCase();
          if (schoolNameValue) {
            filteredData = filteredData.filter(item => item.SCHOOL.toLowerCase().includes(schoolNameValue));
          }

          // Sort by Column
          const sortColumnValue = sortColumnSelect.value;
          if (sortColumnValue) {
            filteredData.sort((a, b) => {
              if (a[sortColumnValue] < b[sortColumnValue]) return -1;
              if (a[sortColumnValue] > b[sortColumnValue]) return 1;
              return 0;
            });
          }

          // Update total schools displayed
          document.getElementById('totalSchools').textContent = filteredData.length;

          // Re-render table body
          renderTableBody(filteredData);
        }

        function renderTableBody(dataToRender) {
          const tbody = document.getElementById('table-body');
          tbody.innerHTML = ''; // Clear existing rows

          dataToRender.forEach((row, index) => {
            const tr = document.createElement('tr');
            tr.className = index % 2 === 0 ? '' : 'bg-gray-50';
            headers.forEach(key => {
              const td = document.createElement('td');
              td.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-700';
              
              // Check if the current column should be a clickable link
              if (key === 'SCHOOL') {
                const schoolNum = row['SCHOOL_NUM']; // Updated to 'SCHOOL_NUM'
                
                // Debugging Log
                console.log(`Creating link for SCHOOL: ${row['SCHOOL']} with SCHOOL_NUM: ${schoolNum}`);
                
                const link = document.createElement('a');
                link.href = `/fact-sheet?schoolNum=${encodeURIComponent(schoolNum)}`;
                link.textContent = row[key];
                link.className = 'text-blue-600 hover:text-blue-900';
                td.appendChild(link);
              } else {
                td.textContent = row[key];
              }
              tr.appendChild(td);
            });
            tbody.appendChild(tr);
          });
        }

        // Initial render
        renderTableBody(data);

        // Set initial total schools displayed
        document.getElementById('totalSchools').textContent = data.length;
      } catch (error) {
        console.error("Error fetching or rendering data:", error);
        alert("An error occurred while loading the data. Please try again later.");
      }
    })();
  </script>
</body>
</html>
