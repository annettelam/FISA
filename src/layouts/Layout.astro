---
import Header from "../components/Header.astro";

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="FISA Application" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>

    <!-- Tailwind CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />

    <!-- Flowbite CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/flowbite@1.6.5/dist/flowbite.min.css"
      rel="stylesheet"
    />

    <!-- Font Awesome for Icons -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
      rel="stylesheet"
    />

    <style is:global>
      :root {
        --accent: 136, 58, 234;
        --accent-light: 224, 204, 250;
        --accent-dark: 49, 10, 101;
        --accent-gradient: linear-gradient(
          45deg,
          rgb(var(--accent)),
          rgb(var(--accent-light)) 30%,
          grey 60%
        );
        --light-bg: #f0f0f0;
        --light-text: #1a1a1a;
        --dark-bg: #181818;
        --dark-text: #e0e0e0;
        --button-bg-light: #e7e7e7;
        --button-bg-dark: #2c2c2c;
        --card-bg-light: #ffffff;
        --card-bg-dark: #242424;
        --border-color-light: #e5e5e5;
        --border-color-dark: #3a3a3a;
      }

      body {
        background-color: var(--bg-color);
        color: var(--text-color);
        transition: background-color 0.3s, color 0.3s;
      }

      html.dark body {
        --bg-color: var(--dark-bg);
        --text-color: var(--dark-text);
      }

      html body {
        --bg-color: var(--light-bg);
        --text-color: var(--light-text);
      }

      /* Button Styles */
      button {
        background-color: var(--button-bg-light);
        color: #333;
        transition: background-color 0.3s ease, color 0.3s ease;
      }

      html.dark button {
        background-color: var(--button-bg-dark);
        color: #f5f5f5;
      }

      /* Header Styling */
      header {
        background: var(--accent-gradient);
        color: white;
        transition: background 0.3s, color 0.3s;
      }

      html.dark header {
        background: rgb(var(--accent-dark));
        color: #e0e0e0;
      }

      /* Card Styles */
      .card {
        background-color: var(--card-bg-light);
        border: 1px solid var(--border-color-light);
        transition: background-color 0.3s, border-color 0.3s;
      }

      html.dark .card {
        background-color: var(--card-bg-dark);
        border-color: var(--border-color-dark);
      }

      /* Additional Styles */
      * {
        transition: background-color 0.3s, color 0.3s, border-color 0.3s;
      }
    </style>
  </head>
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
    <!-- Main Header -->
    <Header />

    <!-- Page Content -->
    <main class="p-4">
      <slot />
    </main>

    <!-- Dark Mode Toggle Script -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const themeToggleButton = document.getElementById("theme-toggle");
        const themeToggleDarkIcon = document.getElementById("theme-toggle-dark-icon");
        const themeToggleLightIcon = document.getElementById("theme-toggle-light-icon");

        if (!themeToggleButton || !themeToggleDarkIcon || !themeToggleLightIcon) {
          console.error("Dark mode toggle elements not found!");
          return;
        }

        const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)");

        // Get current theme from localStorage or fallback to system preference
        const currentTheme = localStorage.getItem("theme") || (prefersDarkScheme.matches ? "dark" : "light");
        if (currentTheme === "dark") {
          document.documentElement.classList.add("dark");
          themeToggleLightIcon.classList.remove("hidden");
          themeToggleDarkIcon.classList.add("hidden");
        } else {
          document.documentElement.classList.remove("dark");
          themeToggleDarkIcon.classList.remove("hidden");
          themeToggleLightIcon.classList.add("hidden");
        }

        // Toggle between light and dark mode on button click
        themeToggleButton.addEventListener("click", () => {
          if (document.documentElement.classList.contains("dark")) {
            document.documentElement.classList.remove("dark");
            localStorage.setItem("theme", "light");
            themeToggleDarkIcon.classList.remove("hidden");
            themeToggleLightIcon.classList.add("hidden");
          } else {
            document.documentElement.classList.add("dark");
            localStorage.setItem("theme", "dark");
            themeToggleLightIcon.classList.remove("hidden");
            themeToggleDarkIcon.classList.add("hidden");
          }
        });
      });
    </script>

    <!-- Flowbite JS -->
    <script src="https://cdn.jsdelivr.net/npm/flowbite@1.6.5/dist/flowbite.min.js"></script>
  </body>
</html>
