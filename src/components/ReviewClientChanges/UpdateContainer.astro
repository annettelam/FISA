<div id="alertContainer"></div>
<div id="updatesContainer" class="space-y-4">
  <!-- Updates will be dynamically inserted here -->
</div>

<script type="module" client:load>
  // Fetch and display updates when the component is loaded
  async function fetchProposedUpdates() {
    try {
      const response = await fetch('/api/proposed-updates');
      if (!response.ok) {
        throw new Error('Failed to fetch proposed updates.');
      }
      const updates = await response.json();
      displayUpdates(updates);
    } catch (error) {
      console.error('Error fetching proposed updates:', error);
      showAlert('An error occurred while fetching proposed updates.', 'error');
    }
  }

  function displayUpdates(updates) {
    const container = document.getElementById('updatesContainer');
    container.innerHTML = ''; // Clear existing content

    if (updates.length === 0) {
      // No updates to display
      const noUpdatesDiv = document.createElement('div');
      noUpdatesDiv.classList.add('p-6', 'bg-white', 'dark:bg-gray-800', 'rounded-lg', 'border', 'border-gray-300', 'dark:border-gray-700', 'shadow-md', 'text-center');
      noUpdatesDiv.innerHTML = `
        <p class="text-gray-700 dark:text-gray-300 text-lg">There are no proposed updates at this time.</p>
      `;
      container.appendChild(noUpdatesDiv);
      return;
    }

    updates.forEach((update) => {
      const { id, school_number, submitted_at, diffs, error } = update;

      const updateDiv = document.createElement('div');
      updateDiv.classList.add('space-y-4');

      // Create the UpdateItem component's HTML with dark mode classes
      let updateHTML = `
        <div class="p-6 bg-white dark:bg-gray-800 rounded-lg border border-gray-300 dark:border-gray-700 shadow-md">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-semibold text-gray-800 dark:text-gray-100">School Number: ${school_number}</h3>
            <p class="text-sm text-gray-500 dark:text-gray-400">Submitted At: ${new Date(submitted_at).toLocaleString()}</p>
          </div>
      `;

      if (error) {
        updateHTML += `
          <div class="p-4 mb-4 text-sm text-red-700 dark:text-red-300 bg-red-100 dark:bg-red-700 rounded-lg" role="alert">
            Error: ${error}
          </div>
        `;
      } else if (diffs && Object.keys(diffs).length > 0) {
        updateHTML += `
          <div class="overflow-x-auto mb-4">
            <table class="w-full text-sm text-left text-gray-500 dark:text-gray-300">
              <thead class="text-xs text-gray-700 dark:text-gray-400 uppercase bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th class="px-4 py-2">Field</th>
                  <th class="px-4 py-2">Current Value</th>
                  <th class="px-4 py-2">Proposed Value</th>
                </tr>
              </thead>
              <tbody>
        `;

        Object.entries(diffs).forEach(([field, values]) => {
          updateHTML += `
            <tr class="bg-white dark:bg-gray-800 border-b dark:border-gray-700">
              <td class="px-4 py-2 font-medium text-gray-900 dark:text-gray-100">${field}</td>
              <td class="px-4 py-2">${values.current}</td>
              <td class="px-4 py-2">${values.proposed}</td>
            </tr>
          `;
        });

        updateHTML += `
              </tbody>
            </table>
          </div>
        `;
      } else {
        updateHTML += `
          <p class="text-gray-700 dark:text-gray-300">No differences found.</p>
        `;
      }

      updateHTML += `
          <div class="flex space-x-2">
            <button class="accept-btn bg-green-500 dark:bg-green-500 hover:bg-green-600 dark:hover:bg-green-600 text-white px-4 py-2 rounded transition-colors duration-300" data-id="${id}">
              Accept
            </button>
            <button class="reject-btn bg-red-500 dark:bg-red-500 hover:bg-red-600 dark:hover:bg-red-600 text-white px-4 py-2 rounded transition-colors duration-300" data-id="${id}">
              Reject
            </button>
          </div>
        </div>
      `;

      updateDiv.innerHTML = updateHTML;
      container.appendChild(updateDiv);
    });

    // Attach event listeners to the buttons after rendering updates
    attachEventListeners();
  }

  function attachEventListeners() {
    // Accept buttons
    const acceptButtons = document.querySelectorAll('.accept-btn');
    acceptButtons.forEach(button => {
      button.addEventListener('click', () => {
        const id = button.getAttribute('data-id');
        acceptUpdate(id);
      });
    });

    // Reject buttons
    const rejectButtons = document.querySelectorAll('.reject-btn');
    rejectButtons.forEach(button => {
      button.addEventListener('click', () => {
        const id = button.getAttribute('data-id');
        rejectUpdate(id);
      });
    });
  }

  async function acceptUpdate(id) {
    try {
      const response = await fetch('/api/accept', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ id })
      });
      const data = await response.json();
      if (data.error) {
        showAlert(data.error, 'error');
      } else {
        // Remove the update from the DOM
        const updateElement = document.querySelector(`[data-id="${id}"]`).closest('div');
        if (updateElement) {
          updateElement.remove();
        }
        showAlert(data.message, 'success');

        // Check if there are any remaining updates
        if (document.getElementById('updatesContainer').children.length === 0) {
          displayNoUpdatesMessage();
        }
      }
    } catch (error) {
      console.error('Error:', error);
      showAlert('An error occurred while accepting the update.', 'error');
    }
  }

  async function rejectUpdate(id) {
    try {
      const response = await fetch('/api/reject', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ id })
      });
      const data = await response.json();
      if (data.error) {
        showAlert(data.error, 'error');
      } else {
        // Remove the update from the DOM
        const updateElement = document.querySelector(`[data-id="${id}"]`).closest('div');
        if (updateElement) {
          updateElement.remove();
        }
        showAlert(data.message, 'success');

        // Check if there are any remaining updates
        if (document.getElementById('updatesContainer').children.length === 0) {
          displayNoUpdatesMessage();
        }
      }
    } catch (error) {
      console.error('Error:', error);
      showAlert('An error occurred while rejecting the update.', 'error');
    }
  }

  function showAlert(message, type) {
    const alertContainer = document.getElementById('alertContainer');

    // Create alert div
    const alertDiv = document.createElement('div');
    alertDiv.classList.add('p-4', 'mb-4', 'text-sm', 'rounded-lg');
    alertDiv.classList.add(type === 'success' ? 'text-green-700 dark:text-green-300 bg-green-100 dark:bg-green-700' : 'text-red-700 dark:text-red-300 bg-red-100 dark:bg-red-700');
    alertDiv.setAttribute('role', 'alert');
    alertDiv.textContent = message;

    // Clear existing alerts
    alertContainer.innerHTML = '';
    alertContainer.appendChild(alertDiv);

    // Auto-remove alert after 5 seconds
    setTimeout(() => {
      alertDiv.remove();
    }, 5000);
  }

  function displayNoUpdatesMessage() {
    const container = document.getElementById('updatesContainer');
    const noUpdatesDiv = document.createElement('div');
    noUpdatesDiv.classList.add('p-6', 'bg-white', 'dark:bg-gray-800', 'rounded-lg', 'border', 'border-gray-300', 'dark:border-gray-700', 'shadow-md', 'text-center');
    noUpdatesDiv.innerHTML = `
      <p class="text-gray-700 dark:text-gray-300 text-lg">There are no proposed updates at this time.</p>
    `;
    container.appendChild(noUpdatesDiv);
  }

  // Fetch updates on page load
  fetchProposedUpdates();

  // Refresh the updates every 3 seconds
  setInterval(fetchProposedUpdates, 3000); // 3,000 
