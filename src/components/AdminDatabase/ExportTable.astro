---
// src/components/ExportTable.astro
---

<div class="max-w-xl mx-auto bg-gray-100 dark:bg-gray-900 p-6 rounded-lg shadow-lg space-y-6 transition-colors duration-300">
  <div class="text-center">
    <h2 class="text-2xl font-semibold text-gray-800 dark:text-gray-100">Export Table to CSV</h2>
    <p class="text-gray-600 dark:text-gray-400">Select a table to export to CSV below.</p>
  </div>

  <!-- Form for exporting a table -->
  <form id="exportTableForm" class="space-y-4">
    <div>
      <label for="exportTableSelect" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
        Choose a Table to Export
      </label>
      <select id="exportTableSelect" name="exportTableSelect" class="block w-full p-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-300 border border-gray-300 dark:border-gray-700 rounded-md" required>
        <option value="" disabled selected>Select a table</option>
        <!-- Table options will be populated dynamically -->
      </select>
    </div>
    <button type="submit" class="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">
      Export to CSV
    </button>
  </form>

  <div id="exportTableMessage" class="mt-4 text-sm text-center"></div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('exportTableForm');
    const exportTableSelect = document.getElementById('exportTableSelect');
    const messageDiv = document.getElementById('exportTableMessage');

    // Function to fetch tables for the dropdown
    async function fetchTables() {
      try {
        const response = await fetch('/api/list-tables');
        if (response.ok) {
          const data = await response.json();
          populateTables(data.tables);
        } else {
          throw new Error('Failed to fetch tables.');
        }
      } catch (error) {
        console.error(error);
        messageDiv.textContent = 'Error fetching tables.';
        messageDiv.className = 'text-red-600';
      }
    }

    // Function to populate the tables dropdown
    function populateTables(tables) {
      exportTableSelect.innerHTML = '<option value="" disabled selected>Select a table</option>';

      if (tables.length === 0) {
        const option = document.createElement('option');
        option.value = "";
        option.textContent = "No tables available";
        option.disabled = true;
        exportTableSelect.appendChild(option);
        exportTableSelect.disabled = true;
        return;
      }

      exportTableSelect.disabled = false;

      tables.forEach(table => {
        const option = document.createElement('option');
        option.value = table;
        option.textContent = table;
        exportTableSelect.appendChild(option);
      });
    }

    // Event listener for exporting the table
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      messageDiv.textContent = '';
      messageDiv.className = '';

      const selectedTable = exportTableSelect.value;

      if (!selectedTable) {
        messageDiv.textContent = 'Please select a table.';
        messageDiv.className = 'text-red-600';
        return;
      }

      const confirmExport = confirm(`Are you sure you want to export the table "${selectedTable}" to CSV?`);
      if (!confirmExport) {
        messageDiv.textContent = 'Action cancelled.';
        messageDiv.className = 'text-yellow-600';
        return;
      }

      try {
        // Make the POST request to export the table
        const response = await fetch('/api/export-table', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ tableName: selectedTable }),
        });

        if (response.ok) {
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `${selectedTable}.csv`;
          document.body.appendChild(a);
          a.click();
          a.remove();
          window.URL.revokeObjectURL(url);

          messageDiv.textContent = `Table '${selectedTable}' exported successfully.`;
          messageDiv.className = 'text-green-600';
          exportTableSelect.value = '';
        } else {
          const errorData = await response.json();
          messageDiv.textContent = errorData.message || 'Error exporting table.';
          messageDiv.className = 'text-red-600';
        }
      } catch (error) {
        console.error(error);
        messageDiv.textContent = 'An error occurred while exporting the table.';
        messageDiv.className = 'text-red-600';
      }
    });

    // Initialize by fetching tables every time the page loads
    fetchTables();
  });
</script>
